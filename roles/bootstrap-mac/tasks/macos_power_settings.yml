---
# https://apple.stackexchange.com/questions/350488/screen-saver-stuck-on-how-to-escape
- name: Check if UUID com.apple.PowerManagement file created
  stat:
    path: "/Library/Preferences/com.apple.PowerManagement.{{ mac_UUID }}.plist"
  register: mac_UUID_PowerManagement

- name: Pull the current defaults values for UUID PowerManager
  shell: defaults read /Library/Preferences/com.apple.PowerManagement.{{ mac_UUID }}.plist "AC Power"
  register: mac_UUID_PowerManagement_defaults_raw
  when: mac_UUID_PowerManagement.stat.exists

- name: Set json fact for current UUID Power Manager
  set_fact:
    mac_UUID_PowerManagement_defaults: "{{ mac_UUID_PowerManagement_defaults_raw.stdout | from_json }}"
  when: mac_UUID_PowerManagement_defaults_raw is defined

- name: Set System Sleep Timer for UUID Power Manager
  shell: defaults write /Library/Preferences/com.apple.PowerManagement.{{ mac_UUID }}.plist "AC Power" -dict-add "System Sleep Timer"  0
  become: yes
  when: mac_UUID_PowerManagement_defaults['System Sleep Timer'] is defined and mac_UUID_PowerManagement_defaults['System Sleep Timer'] != 0

- name: Set Display Sleep Timer for UUID Power Manager
  shell: defaults write /Library/Preferences/com.apple.PowerManagement.{{ mac_UUID }}.plist "AC Power" -dict-add "Display Sleep Timer"  0
  become: yes
  when: mac_UUID_PowerManagement_defaults['Display Sleep Timer'] is defined and mac_UUID_PowerManagement_defaults['Display Sleep Timer'] != 0

- name: set macOS UUID specific System Sleep Timer
  community.general.osx_defaults:
    domain: "/Library/Preferences/com.apple.PowerManagement.{{ mac_UUID }}.plist"
    key: "AC Power"
    type: dict
    value: "{{ new_window_target }}"
    state: present

- name: Check current state of pmset
  shell: /usr/bin/python3 tools/pmset_check.py
  register: current_sleep_settings
  changed_when: false

- name: Convert JSON output to Ansible variables
  set_fact:
    power_settings: "{{ current_sleep_settings.stdout | from_json }}"

- name: Disable auto sleep while connected to power using pmset
  ansible.builtin.command:
    cmd: "pmset -c sleep 0"
  when: power_settings['AC Power']['sleep'] != 0 and prevent_auto_sleep
  become: yes

- name: Disable disk sleep while connected to power using pmset
  ansible.builtin.command:
    cmd: "pmset -c disksleep 0"
  when: power_settings['AC Power']['disksleep'] != 0 and prevent_disk_sleep
  become: yes

- name: Autostart on power restore disk sleep while connected to power using pmset
  ansible.builtin.command:
    cmd: "pmset -c autorestart 1"
  when: power_settings['AC Power']['autorestart'] is defined and power_settings['AC Power']['autorestart'] != 0 and autorestart
  become: yes

- name: Wakeup on network activity using pmset
  ansible.builtin.command:
    cmd: "pmset -c womp 1"
  when: power_settings['AC Power']['womp'] != 1 and wake_network_activity
  become: yes

# This is a very ridged implementation
- name: Default value for reapply schedule
  set_fact:
    reapply_schedule: no

- name: Determine if sleep has been scheduled
  set_fact:
    sleep_scheduled: "{{ power_settings['Repeating power events'] | selectattr('event_type', 'equalto', 'sleep') | list}}"
  when: power_settings['Repeating power events'] is defined
- name: Reapply pmset schedule if Sleep not already set
  set_fact:
    reapply_schedule: yes
  when: sleep_scheduled | length == 0 and auto_sleep_schedule

- name: Determine if wakepoweron has been scheduled
  set_fact:
    wakepoweron_scheduled: "{{ power_settings['Repeating power events'] | selectattr('event_type', 'equalto', 'wakepoweron') | list}}"
  when: power_settings['Repeating power events'] is defined
- name: Reapply pmset schedule if Power On not already set
  set_fact:
    reapply_schedule: yes
  when: wakepoweron_scheduled | length == 0 and auto_wake_poweron_schedule

#- name: Determine if pmset schedule needs to be reapplied
#  block:
#    - name: Sleep Scheduled
#      set_fact:
#        reapply_schedule: yes
#      when: power_settings['Repeating power events'][0]['event_type'] not 'sleep'
#    - name: Sleep time scheduled
#      set_fact:
#        reapply_schedule: yes
#      when: power_settings['Repeating power events'][0]['time'] not s
#  when: power_settings['Repeating power events'] is defined and auto_sleep

- name: Apply pmset schedule if needed
  command:
    cmd: "pmset repeat {{ auto_wake_poweron_schedule_command }} {{ auto_sleep_schedule_command }}"
  become: yes
  when: reapply_schedule