---
# Confirm sudo works
- name: If tasks doesn't execute, press CTR-C and try running again
  shell: echo "Laptop password successful"
  changed_when: false
  become: true

- name: Install baseline homebrew cask packages
  homebrew_cask:
    name: "{{ item }}"
    state: present
    greedy: yes
    sudo_password: "{{ ansible_become_password }}"
  loop: "{{ brew_cask_packages }}"
  ignore_errors: true

- name: Remove homebrew cask packages
  homebrew_cask:
    name: "{{ item }}"
    state: absent
    install_options: force
    sudo_password: "{{ ansible_become_password }}"
  loop: "{{ brew_cask_packages_removed }}"

- name: Tap nats Homebrew repository
  community.general.homebrew_tap:
    name: nats-io/nats-tools
    state: present
  when: '"nats-io/nats-tools/nats" in brew_packages'

- name: Tap peak/tap Homebrew repository
  community.general.homebrew_tap:
    name: peak/tap
    state: present
  when: '"s5cmd" in brew_packages'

# Homebrew installer and dependencies
- name: Install baseline homebrew packages
  homebrew:
    name: "{{ item }}"
    update_homebrew: true
    upgrade_all: false
  loop: "{{ brew_packages }}"
  ignore_errors: true

- name: Remove homebrew packages
  homebrew:
    name: "{{ item }}"
    state: absent
  loop: "{{ brew_packages_removed }}"

- name: Install user homebrew packages
  homebrew:
    name: "{{ item }}"
    upgrade_all: false
  loop: "{{ brew_packages_user }}"

- name: Install user homebrew cask packages
  homebrew_cask:
    name: "{{ item }}"
    state: present
    sudo_password: "{{ ansible_become_password }}"
  loop: "{{ brew_cask_packages_user }}"

- name: Check if signed into Apple ID
  shell: defaults read MobileMeAccounts Accounts
  failed_when: no
  changed_when: no
  register: apple_id_check

- name: Install App Store packages using mas
  community.general.mas:
    id: "{{ item.id }}"
    state: present
  loop: "{{ mas_apps }}"
  when: apple_id_check.stdout != ""

- name: Remove App Store packages using mas
  community.general.mas:
    id: "{{ item.id }}"
    state: absent
  loop: "{{ mas_apps_removed }}"
  when: apple_id_check.stdout != ""

- name: pip baseline packages
  pip:
    executable: "{{ homebrew_path }}/bin/pip3"
    name: "{{ item }}"
    extra_args: --upgrade --break-system-packages
  loop: "{{ pip_packages }}"

- name: Remove pip baseline packages
  pip:
    executable: "{{ homebrew_path }}/bin/pip3"
    name: "{{ item }}"
    state: absent
  loop: "{{ pip_packages_removed }}"

- name: Check to ensure the LaunchAgents directory does exists
  file:
    state: directory
    path: "{{ ansible_user_dir }}/Library/LaunchAgents"

- name: macOS Software Update
  shell: softwareupdate -iaR
  become: true
  register: os_update_status
  changed_when: 'os_update_status.stderr != "No updates are available."'
  when: os_upgrade | bool
