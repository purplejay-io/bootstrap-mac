---
# Homebrew installer and dependencies
- name: Homebrew path
  block:
    - name: Where is homebrew installed?
      shell: which brew | cut -d "/" -f 1-3
      register: homebrew_check
      changed_when: false
    - name: Set homebrew path
      set_fact:
        homebrew_path: "{{ homebrew_check.stdout }}"

- name: Determine if Company Portal exist
  block:
    - name: Does Company Portal exist
      stat:
        path: /Applications/Company Portal.app
      register: intune_companyportal
    - name: companyportal fact
      set_fact:
        companyportal: "{{ intune_companyportal.stat.exists }}"

- name: Determine if Teams exist
  block:
    - name: Does Teams exist
      stat:
        path: /Applications/Microsoft Teams.app
      register: intune_teams
    - name: teams fact
      set_fact:
        teams: "{{ intune_teams.stat.exists }}"

- name: Determine if Edge exist
  block:
    - name: Does Edge exist
      stat:
        path: /Applications/Microsoft Edge.app
      register: intune_edge
    - name: edge fact
      set_fact:
        edge: "{{ intune_edge.stat.exists }}"

- name: Determine if VSCode exist
  block:
    - name: Does VSCode exist
      stat:
        path: /Applications/Visual Studio Code.app
      register: intune_vscode
    - name: vscode fact
      set_fact:
        vscode: "{{ intune_vscode.stat.exists }}"

- name: Determine if secrets.yml exist
  block:
    - name: Does secrets.yml exist
      stat:
        path: vars/secrets.yml
      register: secrets_checker
    - name: secrets_file fact
      set_fact:
        secrets_file: "{{ secrets_checker.stat.exists }}"

- name: Get serial number of mac localhost
  block:
    - name: Use ioreg to get Mac SN
      shell: ioreg -c IOPlatformExpertDevice -d 2 | awk -F\" '/IOPlatformSerialNumber/{print $(NF-1)}' | sed 's/^[ \t]*//;s/[ \t]*$//'
      register: content_of_mac_serial_num
      changed_when: false
    - name: Set host_serial
      set_fact:
        host_serial: "{{content_of_mac_serial_num.stdout}}"
  check_mode: no

#- name: SSH Key Exist
#  block:
#    - name: Stat check if sshkey exists
#      stat:
#        path: ~/.ssh/id_rsa
#      register: current_sshkey
#    - name: Set sshkey_exist
#      set_fact:
#        sshkey_exists: "{{ current_sshkey.stat.exists }}"
#
#- name: Determine if SSH is running
#  block:
#    - name: Use launchctl to determine if sshd is running
#      shell: launchctl list | grep ssh
#      become: yes
#      register: ssh_check
#      failed_when: false
#      changed_when: false
#    - name: Set ssh_status
#      set_fact:
#        ssh_status: "{{ ssh_check.rc }}"

#- name: Determin if 1Password CLI has ever logged in
#  block:
#    - name: Stat check if op config
#      stat:
#        path: ~/.config/op/config
#      register: op_config
#    - name: Set opconfig_exist
#      set_fact:
#        opconfig_exist: "{{ op_config.stat.exists }}"
#        op_login: false
#
#- name: Determine if 1Password CLI is logged in
#  block:
#    - name: Determine if op cli is logged in
#      shell: op account get
#      changed_when: false
#      register: op_check
#      failed_when: false
#    - name: Set op status true
#      set_fact:
#        op_login: true
#      when: not op_check.stderr
##    - name: Set op status false
##      set_fact:
##        op_login: false
##      when: op_check.stderr
#  when: opconfig_exist

- name: Get macOS Hardware UUID
  shell: system_profiler SPHardwareDataType | awk '/UUID/ { print $NF }'
  register: mac_UUID
  changed_when: no
  check_mode: no
